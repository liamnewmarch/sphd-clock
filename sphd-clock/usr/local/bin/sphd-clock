#!/usr/bin/env python3

from datetime import datetime
from signal import signal, SIGINT, SIGTERM
import time

import scrollphathd as sphd
from scrollphathd.fonts import font3x5 as font
import yaml


class Schedule:
    """A daily Schedule with a start and end time"""

    start_time: tuple[int, int]
    end_time: tuple[int, int]

    def __init__(self, start_time: int, end_time: int):
        self.start_time = divmod(int(start_time), 60)
        self.end_time = divmod(int(end_time), 60)

    def is_active(self, when: datetime) -> bool:
        hour_min = (when.hour, when.minute)
        return hour_min >= self.start_time and hour_min < self.end_time


class SphdClock:
    """A Clock for the Scroll pHAT HD """

    active: bool = True
    blink: bool = False
    schedule: Schedule | None = None

    def __init__(self, config_path: str):
        with open(config_path, "r") as stream:
            data = yaml.safe_load(stream)

        if not data:
            return

        if "blink" in data:
            self.blink = bool(data["blink"])

        if "rotate" in data:
            sphd.rotate(int(data["rotate"]))

        if "schedule" in data:
            self.schedule = Schedule(
                start_time=data["schedule"]["start_time"],
                end_time=data["schedule"]["end_time"],
            )

    def tick(self):
        """Draw the current time to the display with flashing separator."""

        now = datetime.now()

        if self.schedule and not self.schedule.is_active(now):
            if self.active:
                self.active = False
                sphd.clear()
                sphd.show()

            time.sleep(1)
            return

        self.active = True
        sphd.clear()
        sphd.write_string(
            now.strftime("%H:%M"),
            brightness=0.1,
            font=font,
            x=0,
            y=1,
        )

        if self.blink and now.second % 2 == 0:
            sphd.clear_rect(8, 0, 1, 5)

        sphd.show()
        time.sleep(0.1)


if __name__ == "__main__":
    try:
        signal(SIGINT, exit)
        signal(SIGTERM, exit)

        print("Scroll pHAT HD clock v1.2-4")
        print("Press Ctrl-C to exit")

        clock = SphdClock("/etc/sphd-clock/config.yaml")

        while True:
            clock.tick()

    except KeyboardInterrupt:
        print("\nExiting...")
        sphd.clear()
